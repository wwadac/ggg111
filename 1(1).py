import os
import requests
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import tempfile
from moviepy.editor import VideoFileClip
import cv2
import numpy as np

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8445402631:AAG7EhMBYzljYIawRiD8Wh0tICFVESrSKdY"
HOST_URL = "https://bothost.ru"  # –∏–ª–∏ –≤–∞—à —Ö–æ—Å—Ç

async def process_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –∫—Ä—É–∂–æ–∫"""
    
    if not update.message.video:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_file = await update.message.video.get_file()
        
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_input:
            await video_file.download_to_drive(temp_input.name)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            output_path = await convert_to_circle_video(temp_input.name)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_input.name)
        
        if output_path:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, 'rb') as video_file:
                await update.message.reply_video(
                    video=video_file,
                    caption="‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ!"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            os.unlink(output_path)
            await processing_msg.delete()
            
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def convert_to_circle_video(input_path):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–∏–¥–µ–æ –≤ –∫—Ä—É–≥–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_output:
            output_path = temp_output.name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        clip = VideoFileClip(input_path)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –∫—Ä—É–≥–∞
        def make_circle_frame(frame):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
            h, w = frame.shape[:2]
            size = min(h, w)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –∫—Ä—É–≥–∞
            mask = np.zeros((h, w), dtype=np.uint8)
            center = (w // 2, h // 2)
            radius = size // 2
            cv2.circle(mask, center, radius, 255, -1)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
            if len(frame.shape) == 3:
                mask = mask[:, :, np.newaxis]
                result = frame * (mask / 255)
            else:
                result = frame * (mask / 255)
            
            return result.astype(np.uint8)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–¥—Ä—É
        processed_clip = clip.fl_image(make_circle_frame)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        processed_clip.write_videofile(
            output_path,
            codec='libx264',
            audio_codec='aac',
            temp_audiofile='temp-audio.m4a',
            remove_temp=True
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
        clip.close()
        processed_clip.close()
        
        return output_path
        
    except Exception as e:
        print(f"Error in video processing: {e}")
        return None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–∂–æ—á–∫–æ–≤ –∏–∑ –≤–∏–¥–µ–æ.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ –∫—Ä—É–≥–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç!

üìπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∏–¥–µ–æ –¥–æ 20MB.
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (–Ω–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–≥–æ–≤–æ–π —Ä–∞–º–∫–µ!

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB
- –§–æ—Ä–º–∞—Ç—ã: MP4, MOV, AVI
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 1 –º–∏–Ω—É—Ç—ã
    """
    await update.message.reply_text(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.VIDEO, process_video))
    application.add_handler(MessageHandler(filters.COMMAND & filters.Regex("start"), start_command))
    application.add_handler(MessageHandler(filters.COMMAND & filters.Regex("help"), help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
